version: '3.7'
services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "8082:80"  # Expose port 8080 on the host, mapped to port 80 in the container
    networks:
      - mynetwork
    depends_on:
      - backend  # Ensure the backend service starts first
      - db
    working_dir: /app

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8081:8080"  # Expose port 8081 on the host, mapped to port 8080 in the container
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://localhost:3306/testdb?allowPublicKeyRetrieval=true&useSSL=false
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=root
    networks:
      - mynetwork
    depends_on:
      - db  # Ensure the db service starts first
    working_dir: /app
    entrypoint: ["dockerize", "-wait", "tcp://db:3306", "-timeout", "600s", "sh", "-c", "sleep 10 && java -jar app.jar"]   # Use dockerize to wait for the database ["sh", "-c", "echo 'Waiting for database...'; dockerize -wait tcp://db:3306 -timeout 300s && echo 'Database is ready!' && java -jar app.jar"]

  db:
    image: mysql:8.0
    container_name: mysql_db
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: testdb
      MYSQL_USER: user1
      MYSQL_PASSWORD: user1
    healthcheck:
      test: ["CMD-SHELL", "/usr/bin/mysql --user=root --password=root --execute \"SHOW DATABASES;\""]
      interval: 30s
      timeout: 10s
      retries: 10
    ports:
      - "3306:3306"  # Expose port 3306 on the host, mapped to port 3306 in the container
    networks:
      - mynetwork
    volumes:
      - db_data:/var/lib/mysql  # Persist MySQL data
    command: --default-authentication-plugin=mysql_native_password  # Use the native password plugin

networks:
  mynetwork:
    driver: bridge  # Use a bridge network for communication between containers

volumes:
  db_data:  # Define a named volume for MySQL data persistence

